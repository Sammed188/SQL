Case Study #1 - Danny's Diner
Introduction
Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and opens up a cute little restaurant that sells his 3 favourite foods: sushi, curry and ramen.

Danny’s Diner is in need of your assistance to help the restaurant stay afloat - the restaurant has captured some very basic data from their few months of operation but have no idea how to use their data to help them run the business.

Problem Statement
Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns, how much money they’ve spent and also which menu items are their favourite. Having this deeper connection with his customers will help him deliver a better and more personalised experience for his loyal customers.

He plans on using these insights to help him decide whether he should expand the existing customer loyalty program - additionally he needs help to generate some basic datasets so his team can easily inspect the data without needing to use SQL.

Danny has provided you with a sample of his overall customer data due to privacy issues - but he hopes that these examples are enough for you to write fully functioning SQL queries to help him answer his questions!

Danny has shared with you 3 key datasets for this case study:

sales
menu
members

Case Study Questions
Each of the following case study questions can be answered using a single SQL statement:

1.What is the total amount each customer spent at the restaurant?
2.How many days has each customer visited the restaurant?
3.What was the first item from the menu purchased by each customer?
4.What is the most purchased item on the menu and how many times was it purchased by all customers?
5.Which item was the most popular for each customer?
6.Which item was purchased first by the customer after they became a member?
7.Which item was purchased just before the customer became a member?
8.What is the total items and amount spent for each member before they became a member?
9.If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
10.In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SOLUTION

1.What is the total amount each customer spent at the restaurant?
We use the SUM and GROUP BY functions to find out total spent for each customer and JOIN function because customer_id is from sales table and price is from menu table.

SELECT s.customer_id, SUM(price) AS total_price
FROM cap_project.sales s
JOIN cap_project.menu m
ON s.product_id = m.product_id
GROUP BY 1;

Answer:

Customer A spent $76.
Customer B spent $74.
Customer C spent $36.

2.How many days has each customer visited the restaurant?

Use DISTINCT and wrap with COUNT function to find out number of days customer visited the restaurant.

If we do not use DISTINCT for order_date, the number of days may be repeated. For example, if customer A visited the restaurant twice on ‘2021–01–07’, then number of days may have counted as 2 instead of 1 day.

SELECT customer_id, COUNT(DISTINCT(order_date)) AS Number_of_time_visited
FROM cap_project.sales
GROUP BY customer_id;

Answer:

Customer A visited 4 times.
Customer B visited 6 times.
Customer C visited 2 times.

3.What was the first item from the menu purchased by each customer?

First, we have to create a CTE using WITH function. In the summary CTE, we use DENSE_RANK and OVER(PARTITION BY ORDER BY) to create a new column rank based on order_date.

I chose to use DENSE_RANK instead of ROW_NUMBER or RANK as the order_date is not time stamped hence, we do not know which item is ordered first if 2 or more items are ordered on the same day.

WITH ranking_cte AS 
(
SELECT s.customer_id, m.product_name,
DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date ASC) AS ranking
FROM cap_project.sales s
JOIN cap_project.menu m
ON s.product_id = m.product_id
)
SELECT DISTINCT(customer_id), product_name
FROM ranking_cte
WHERE ranking = 1;

Answer:

Customer A’s first order are curry and sushi.
Customer B’s first order is curry.
Customer C’s first order is ramen.

4.What is the most purchased item on the menu and how many times was it purchased by all customers?
Here we solve it by various method. For easy step by step understanding i had solved with this method.

SELECT m.product_name, COUNT(s.product_id) AS count_product_name
FROM cap_project.sales s
JOIN cap_project.menu m
ON s.product_id = m.product_id
GROUP BY m.product_name
ORDER BY count_product_name DESC
LIMIT 1;


5.Which item was the most popular for each customer?

WITH fav_product_cte AS
(
SELECT s.customer_id, m.product_name,
count(m.product_id) AS count_id,
DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY count(s.customer_id) DESC) AS ranking
FROM cap_project.sales s
JOIN cap_project.menu m
ON s.product_id = m.product_id
GROUP BY s.customer_id, m.product_name
)
SELECT customer_id, product_name, count_id
FROM fav_product_cte
WHERE ranking = 1;

CONCLUSION
Customer A and C’s favourite item is ramen.
Customer B enjoys all items in the menu. He/she is a true foodie.

6. Which item was purchased first by the customer after they became a member?

WITH first_product_cte AS
(
SELECT s.customer_id, s.product_id, s.order_date, mm.join_date,
DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date) AS ranking
FROM cap_project.sales s
JOIN cap_project.members mm
ON s.customer_id = mm.customer_id
WHERE s.order_date >= mm.join_date
)
SELECT f.customer_id, m.product_name
FROM first_product_cte F
JOIN cap_project.menu m
ON F.product_id = m.product_id
WHERE ranking = 1
ORDER BY F.customer_id;

Answer:

After Customer A became a member, his/her first order is curry, whereas it’s sushi for Customer B.

7.Which item was purchased just before the customer became a member?

WITH first_product_cte AS
(
SELECT s.customer_id, s.product_id, s.order_date, mm.join_date,
DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date DESC ) AS RANKING
FROM cap_project.sales s
JOIN cap_project.members mm
ON s.customer_id = mm.customer_id
WHERE s.order_date < mm.join_date
)
SELECT f.customer_id, m.product_name
FROM first_product_cte F
JOIN cap_project.menu m
ON F.product_id = m.product_id
WHERE ranking = 1
ORDER BY F.customer_id;

Answer:

Customer A’s order before he/she became member is sushi and curry and Customer B’s order is sushi. That must have been a real good sushi!

8.What is the total items and amount spent for each member before they became a member?

SELECT s.customer_id, COUNT(DISTINCT s.product_id) AS unique_menu_item, SUM(mm.price) AS total_sales
FROM sales AS s
JOIN members AS m
 ON s.customer_id = m.customer_id
JOIN menu AS mm
 ON s.product_id = mm.product_id
WHERE s.order_date < m.join_date
GROUP BY s.customer_id;

Answer: Before becoming members,

Customer A spent $ 25 on 2 items.
Customer B spent $40 on 2 items.

9.If each $1 spent equates to 10 points and sushi has a 2x points multiplier — how many points would each customer have?

Let’s breakdown the question.

Each $1 spent = 10 points.
But, sushi (product_id 1) gets 2x points, meaning each $1 spent = 20 points
So, we use CASE WHEN to create conditional statements

If product_id = 1, then every $1 price multiply by 20 points
All other product_id that is not 1, multiply $1 by 10 points

Using the table above, we SUM the price, match it to the product_id and SUM the total_points.

WITH points_cte AS
(SELECT *,
		CASE WHEN product_id = 1 then price * 20 else price * 10  END AS points
FROM cap_project.menu )
select s.customer_id, SUM(points) AS total_points
FROM points_cte p
JOIN cap_project.sales  s
on p.product_id = s.product_id
GROUP BY s.customer_id;

Answer:

Total points for Customer A, B and C are 860, 940 and 360.

10.In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi — how many points do customer A and B have at the end of January?

WITH intervalday_cte AS
(
 SELECT *, 
  join_date + INTERVAL'6 DAY' AS first_week,
  EOMONTH('2021-01-31') AS last_date
 FROM cap_project.members mm
),
point_cte AS 
(
SELECT s.customer_id, s.order_date, c.join_date, s.product_id, m.product_name, c.LAST_DATE, c.first_week, m.price,
		SUM(case when m.product_name = sushi THEN 2 * 10 * m.price
        when s.order_date BETWEEN c.join_date AND c.first_week THEN 2 * 10 * m.price 
        ELSE 10 * m.price 
        END ) AS points
FROM intervalday_cte c
JOIN cap_project.sales s
on c.customer_id = s.customer_id
JOIN cap_project.menu m
ON s.product_id = m.product_id
WHERE s.order_date < c.LAST_DATE
GROUP BY s.customer_id, s.order_date, c.join_date, s.product_id, m.product_name, c.LAST_DATE, c.first_week, m.price
)
SELECT customer_id,
SUM(points) AS total_points
FROM point_cte 
GROUP BY customer_id;

Answer:

Customer A has 1,370points.
Customer B has 820 points.
